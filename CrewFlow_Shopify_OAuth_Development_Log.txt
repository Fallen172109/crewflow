================================================================================
CREWFLOW SHOPIFY OAUTH INTEGRATION: COMPLETE DEVELOPMENT LOG
================================================================================

PROJECT: CrewFlow - Maritime-themed AI automation platform
GOAL: Replace complex Shopify OAuth with simplified, production-ready integration
TIMEFRAME: 2 days of development, multiple deployment attempts
FINAL STATUS: ✅ SUCCESSFUL - All functionality restored

================================================================================
OVERVIEW
================================================================================

We attempted to simplify CrewFlow's Shopify OAuth integration but accidentally 
broke the normal user experience. This document chronicles every step, including 
all failures and the final working solution.

ORIGINAL ISSUE: Complex OAuth implementation was hard to debug and test
SOLUTION ATTEMPT: Simplified OAuth with minimal code
UNINTENDED CONSEQUENCE: White background issue for regular users
FINAL RESOLUTION: Restored user routing while maintaining OAuth simplicity

================================================================================
DAY 1: INITIAL IMPLEMENTATION
================================================================================

TARGET: Create simplified Shopify OAuth integration with these files:
1. src/lib/env.ts - Environment detection
2. src/app/api/auth/shopify/route.ts - OAuth initialization  
3. src/app/api/auth/shopify/callback/route.ts - OAuth callback
4. src/app/embedded/page.tsx - Embedded app landing
5. src/app/page.tsx - Root page handler
6. middleware.ts - Request routing
7. src/app/api/webhooks/shopify/[topic]/route.ts - Webhook handler

================================================================================
FILE 1: ENVIRONMENT DETECTION (src/lib/env.ts)
================================================================================

PURPOSE: Detect correct base URL across different environments
STATUS: ✅ Working correctly

CODE:
```typescript
// src/lib/env.ts
export function getBaseUrl() {
  const fromEnv =
    process.env.NEXT_PUBLIC_APP_URL ||
    process.env.NEXT_PUBLIC_SITE_URL ||
    process.env.NEXTAUTH_URL ||
    (process.env.VERCEL_URL ? `https://${process.env.VERCEL_URL}` : '');
  const url = fromEnv || 'http://localhost:3000';
  return url.replace(/\/$/, ''); // strip trailing slash
}
```

ANALYSIS:
- Simple priority-based URL detection
- Fallback to localhost for development
- Strips trailing slashes for consistency
- No issues with this implementation

================================================================================
FILE 2: OAUTH INITIALIZATION (src/app/api/auth/shopify/route.ts)
================================================================================

PURPOSE: Handle Shopify OAuth initiation with minimal scopes
STATUS: ✅ Working correctly after import path fix

INITIAL CODE (with bug):
```typescript
// PROBLEMATIC VERSION - Wrong import path
import crypto from 'crypto';
import { NextResponse } from 'next/server';
import { getBaseUrl } from '@/src/lib/env'; // ❌ WRONG PATH

export async function GET(req: Request) {
  const url = new URL(req.url);
  const shop = url.searchParams.get('shop');
  if (!shop || !shop.endsWith('.myshopify.com')) {
    return NextResponse.json({ error: 'Missing or invalid "shop" param' }, { status: 400 });
  }

  const scopes = [
    'read_products','write_products',
    'read_orders',
    'read_customers',
  ].join(',');

  const state = crypto.randomUUID();
  const redirectUri = `${getBaseUrl()}/api/auth/shopify/callback`;

  const authUrl = new URL(`https://${shop}/admin/oauth/authorize`);
  authUrl.searchParams.set('client_id', process.env.SHOPIFY_CLIENT_ID!);
  authUrl.searchParams.set('scope', scopes);
  authUrl.searchParams.set('redirect_uri', redirectUri);
  authUrl.searchParams.set('state', state);
  authUrl.searchParams.append('grant_options[]', 'per-user');

  return NextResponse.redirect(authUrl.toString());
}
```

FIXED VERSION:
```typescript
// WORKING VERSION - Correct import path
import crypto from 'crypto';
import { NextResponse } from 'next/server';
import { getBaseUrl } from '@/lib/env'; // ✅ CORRECT PATH

// ... rest of code identical
```

BUG ENCOUNTERED: Module not found: Can't resolve '@/src/lib/env'
ROOT CAUSE: Used '@/src/lib/env' instead of '@/lib/env'
LESSON: Always verify import paths match project structure

================================================================================
FILE 3: OAUTH CALLBACK (src/app/api/auth/shopify/callback/route.ts)  
================================================================================

PURPOSE: Handle OAuth callback and token exchange
STATUS: ✅ Working correctly after import path fix

CODE:
```typescript
// src/app/api/auth/shopify/callback/route.ts
import { NextResponse } from 'next/server';
import { getBaseUrl } from '@/lib/env'; // Fixed import path

async function exchangeCodeForToken(shop: string, code: string) {
  const r = await fetch(`https://${shop}/admin/oauth/access_token`, {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({
      client_id: process.env.SHOPIFY_CLIENT_ID,
      client_secret: process.env.SHOPIFY_CLIENT_SECRET,
      code,
    }),
  });
  if (!r.ok) return null;
  return r.json() as Promise<{ access_token: string; scope: string }>;
}

export async function GET(req: Request) {
  const url = new URL(req.url);
  const shop = url.searchParams.get('shop') || '';
  const code = url.searchParams.get('code') || '';
  const host = url.searchParams.get('host') || '';
  
  if (!shop || !code) {
    return NextResponse.redirect(`${getBaseUrl()}/shopify/setup?error=missing_params`);
  }

  const token = await exchangeCodeForToken(shop, code);
  if (!token?.access_token) {
    return NextResponse.redirect(`${getBaseUrl()}/shopify/setup?error=token_exchange_failed`);
  }

  // TODO: upsert/save store to DB (shop_domain, access_token, scope)
  
  const target = new URL('/shopify/setup', getBaseUrl());
  target.searchParams.set('shop', shop);
  if (host) target.searchParams.set('host', host);
  target.searchParams.set('connected', '1');

  return NextResponse.redirect(target.toString());
}
```

ANALYSIS:
- Simple token exchange with Shopify
- Basic error handling with redirects
- TODO comments for database integration
- Same import path bug as route.ts (fixed)

================================================================================
FILE 4: EMBEDDED APP LANDING (src/app/embedded/page.tsx)
================================================================================

PURPOSE: Handle embedded Shopify app requests
STATUS: ✅ Working correctly

CODE:
```typescript
'use client';
import { useEffect } from 'react';

export default function Embedded() {
  useEffect(() => {
    const p = new URLSearchParams(window.location.search);
    const shop = p.get('shop') || p.get('shopify_domain') || '';
    if (shop) {
      const to = new URL('/api/auth/shopify', window.location.origin);
      to.searchParams.set('shop', shop);
      const host = p.get('host');
      if (host) to.searchParams.set('host', host);
      window.location.replace(to.toString());
    }
  }, []);
  return <div style={{ padding: 16 }}>Anchoring CrewFlow… launching OAuth in Shopify.</div>;
}
```

ANALYSIS:
- Simple client-side redirect to OAuth flow
- Handles both 'shop' and 'shopify_domain' parameters
- Preserves 'host' parameter for embedded context
- Minimal UI with maritime theming
- No issues with this implementation

================================================================================
FILE 5: ROOT PAGE HANDLER (src/app/page.tsx) - THE PROBLEMATIC FILE
================================================================================

PURPOSE: Handle root page requests and route users appropriately
STATUS: ❌ CAUSED WHITE BACKGROUND ISSUE - Later fixed

PROBLEMATIC VERSION (Day 1):
```typescript
'use client';
import { useEffect } from 'react';

export default function Home() {
  useEffect(() => {
    const q = new URLSearchParams(location.search);
    if (q.get('shop') && (q.get('hmac') || q.get('host'))) {
      const to = new URL('/api/auth/shopify', location.origin);
      to.search = q.toString();
      location.replace(to.toString());
    }
    // ❌ CRITICAL ISSUE: No handling for regular users!
  }, []);
  return <div style={{ padding: 16 }}>CrewFlow is ready to sail.</div>; // ❌ WHITE BACKGROUND ISSUE
}
```

PROBLEMS WITH THIS VERSION:
1. Only handles Shopify OAuth requests
2. Regular users get stuck on minimal white page
3. No authentication-based routing
4. No loading states or proper UX
5. Authenticated users don't get redirected to dashboard
6. Unauthenticated users don't get redirected to login

IMPACT:
- ✅ Shopify OAuth users: Worked correctly
- ❌ Regular users: White background with minimal text
- ❌ Authenticated users: Stuck on landing page
- ❌ Unauthenticated users: No login redirect

================================================================================
FILE 6: MIDDLEWARE (middleware.ts) - ALSO PROBLEMATIC
================================================================================

PURPOSE: Handle request routing and authentication
STATUS: ❌ OVERSIMPLIFIED - Broke authentication protection

PROBLEMATIC VERSION (Day 1):
```typescript
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';

export function middleware(req: NextRequest) {
  const { pathname } = req.nextUrl;

  // Never redirect/block Shopify webhooks
  if (pathname.startsWith('/api/webhooks/shopify')) {
    return NextResponse.next();
  }

  // If you use maintenance mode, still allow API calls
  if (process.env.AUTO_MAINTENANCE_MODE === 'true' && pathname.startsWith('/api/')) {
    return NextResponse.next();
  }

  // ...your existing middleware (auth/redirects) here...
  // ❌ CRITICAL ISSUE: This comment was never implemented!

  return NextResponse.next();
}

export const config = {
  matcher: ['/((?!_next|favicon.ico|robots.txt|sitemap.xml).*)'],
};
```

PROBLEMS WITH THIS VERSION:
1. No authentication protection for /dashboard routes
2. No authentication protection for /admin routes
3. No Supabase session handling for API routes
4. Comment says "existing middleware" but it was removed
5. Only handles webhook bypassing

IMPACT:
- ❌ Dashboard routes: No longer protected
- ❌ Admin routes: No longer protected
- ❌ API routes: No session management
- ✅ Shopify webhooks: Properly bypassed

================================================================================
FILE 7: WEBHOOK HANDLER - DEPLOYMENT FAILURE
================================================================================

PURPOSE: Handle Shopify webhooks with HMAC validation
STATUS: ❌ CAUSED BUILD FAILURE - Route conflict

PROBLEMATIC VERSION:
```typescript
// src/app/api/webhooks/shopify/[topic]/route.ts
import crypto from 'crypto';
import { NextResponse } from 'next/server';

export const dynamic = 'force-dynamic';

function validHmac(raw: string, header: string | null) {
  const secret = process.env.SHOPIFY_WEBHOOK_SECRET!;
  const digest = crypto.createHmac('sha256', secret).update(raw, 'utf8').digest('base64');
  return !!header && crypto.timingSafeEqual(Buffer.from(header), Buffer.from(digest));
}

export async function POST(req: Request) {
  const sig = req.headers.get('x-shopify-hmac-sha256');
  const raw = await req.text();

  if (!validHmac(raw, sig)) {
    return NextResponse.json({ error: 'Invalid signature' }, { status: 401 });
  }

  return NextResponse.json({ ok: true });
}
```

BUILD ERROR:
```
Error: You cannot use different slug names for the same dynamic path ('topic' !== 'userId').
```

ROOT CAUSE:
- Created [topic] route in /api/webhooks/shopify/
- But [userId] route already existed in same directory
- Next.js doesn't allow different dynamic route names in same path

SOLUTION:
- Removed [topic] route
- Created /api/webhooks/shopify/general/route.ts instead

================================================================================
DAY 1: DEPLOYMENT FAILURES SUMMARY
================================================================================

FAILURE #1: Dynamic Route Conflict
- Error: "You cannot use different slug names for the same dynamic path"
- Cause: [topic] conflicted with existing [userId] route
- Fix: Renamed to /general/ route

FAILURE #2: Import Path Error
- Error: "Module not found: Can't resolve '@/src/lib/env'"
- Cause: Wrong import path @/src/lib/env vs @/lib/env
- Fix: Corrected import paths in route.ts and callback/route.ts

DEPLOYMENT COMMANDS (Day 1):
```bash
git add .
git commit -m "feat: implement simplified Shopify OAuth integration"
git push origin main
# ❌ Failed: Dynamic route conflict

git add .
git commit -m "fix: resolve dynamic route conflict in webhooks"
git push origin main
# ❌ Failed: Import path error

git add .
git commit -m "fix: correct import paths for env.ts module"
git push origin main
# ✅ Success: Build completed, deployed to crewflow.ai
```

================================================================================
DAY 2: USER EXPERIENCE CRISIS
================================================================================

ISSUE DISCOVERED: After successful deployment, users reported white background
with only minimal text: "CrewFlow is ready to sail."

USER IMPACT ANALYSIS:
- Regular users: ❌ Stuck on white page, couldn't access app
- Authenticated users: ❌ No redirect to dashboard
- Unauthenticated users: ❌ No redirect to login
- Shopify OAuth users: ✅ Still working correctly
- Embedded app users: ✅ Still working correctly

ROOT CAUSE ANALYSIS:
The simplified page.tsx only handled Shopify OAuth requests and provided no
routing logic for regular users. The oversimplified middleware removed all
authentication protection.

================================================================================
DAY 2: FINAL SOLUTION - FIXED IMPLEMENTATIONS
================================================================================

FIXED ROOT PAGE (src/app/page.tsx):
```typescript
'use client';
import { useEffect } from 'react';
import { useAuth } from '@/lib/auth-context';
import { useRouter } from 'next/navigation';

export default function Home() {
  const { user, loading } = useAuth();
  const router = useRouter();

  useEffect(() => {
    // Handle Shopify OAuth requests first (preserve functionality)
    const q = new URLSearchParams(location.search);
    if (q.get('shop') && (q.get('hmac') || q.get('host'))) {
      const to = new URL('/api/auth/shopify', location.origin);
      to.search = q.toString();
      location.replace(to.toString());
      return;
    }

    // ✅ NEW: Handle normal user routing
    if (!loading) {
      if (user && user.email_confirmed_at) {
        // Authenticated user - redirect to dashboard
        router.push('/dashboard');
      } else {
        // Unauthenticated user - redirect to login
        router.push('/auth/login');
      }
    }
  }, [user, loading, router]);

  // ✅ NEW: Show loading state while determining redirect
  if (loading) {
    return (
      <div style={{
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        minHeight: '100vh',
        fontFamily: 'system-ui, -apple-system, sans-serif'
      }}>
        <div style={{ textAlign: 'center' }}>
          <div style={{
            width: '32px',
            height: '32px',
            border: '2px solid #FF6A3D',
            borderTop: '2px solid transparent',
            borderRadius: '50%',
            animation: 'spin 1s linear infinite',
            margin: '0 auto 16px'
          }}></div>
          <p style={{ color: '#666', margin: 0 }}>CrewFlow is ready to sail...</p>
        </div>
        <style jsx>{`
          @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
          }
        `}</style>
      </div>
    );
  }

  // Fallback for edge cases
  return (
    <div style={{ padding: 16, fontFamily: 'system-ui, -apple-system, sans-serif' }}>
      CrewFlow is ready to sail.
    </div>
  );
}
```

KEY IMPROVEMENTS:
1. ✅ Preserves Shopify OAuth functionality
2. ✅ Adds proper user authentication routing
3. ✅ Shows branded loading spinner
4. ✅ Handles authenticated vs unauthenticated users
5. ✅ Maintains maritime theming
6. ✅ Provides fallback for edge cases

FIXED MIDDLEWARE (middleware.ts):
```typescript
import { NextResponse } from 'next/server';
import type { NextRequest } from 'next/server';
import { createServerClient, type CookieOptions } from '@supabase/ssr';

export async function middleware(req: NextRequest) {
  const { pathname } = req.nextUrl;

  // Skip middleware for auth routes to prevent redirect loops
  if (pathname.startsWith('/auth/')) {
    return NextResponse.next();
  }

  // Skip middleware for ALL OAuth routes to prevent interference
  if (pathname.startsWith('/api/auth/')) {
    return NextResponse.next();
  }

  // Never redirect/block Shopify webhooks (preserved)
  if (pathname.startsWith('/api/webhooks/shopify')) {
    return NextResponse.next();
  }

  // If you use maintenance mode, still allow API calls (preserved)
  if (process.env.AUTO_MAINTENANCE_MODE === 'true' && pathname.startsWith('/api/')) {
    return NextResponse.next();
  }

  // ✅ RESTORED: Handle Supabase authentication for API routes
  if (pathname.startsWith('/api/')) {
    let response = NextResponse.next({
      request: {
        headers: req.headers,
      },
    });

    const supabase = createServerClient(
      process.env.NEXT_PUBLIC_SUPABASE_URL!,
      process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
      {
        cookies: {
          get(name: string) {
            return req.cookies.get(name)?.value;
          },
          set(name: string, value: string, options: CookieOptions) {
            response.cookies.set({
              name,
              value,
              ...options,
            });
          },
          remove(name: string, options: CookieOptions) {
            response.cookies.set({
              name,
              value: '',
              ...options,
            });
          },
        },
      }
    );

    await supabase.auth.getUser();
    return response;
  }

  // Skip middleware for static files
  if (pathname.startsWith('/_next/') || pathname.includes('.')) {
    return NextResponse.next();
  }

  // ✅ RESTORED: Protect dashboard routes
  if (pathname.startsWith('/dashboard')) {
    const accessToken = req.cookies.get('sb-access-token')?.value;
    const refreshToken = req.cookies.get('sb-refresh-token')?.value;

    if (!accessToken && !refreshToken) {
      const redirectUrl = new URL('/auth/login', req.url);
      redirectUrl.searchParams.set('redirectTo', pathname);
      return NextResponse.redirect(redirectUrl);
    }
  }

  // ✅ RESTORED: Protect admin routes
  if (pathname.startsWith('/admin')) {
    const accessToken = req.cookies.get('sb-access-token')?.value;
    const refreshToken = req.cookies.get('sb-refresh-token')?.value;

    if (!accessToken && !refreshToken) {
      const redirectUrl = new URL('/auth/login', req.url);
      redirectUrl.searchParams.set('redirectTo', pathname);
      return NextResponse.redirect(redirectUrl);
    }
  }

  return NextResponse.next();
}

export const config = {
  matcher: [
    '/((?!_next/static|_next/image|favicon.ico|.*\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',
  ],
};
```

KEY RESTORATIONS:
1. ✅ Dashboard route protection restored
2. ✅ Admin route protection restored
3. ✅ Supabase session handling for API routes
4. ✅ Proper cookie-based authentication checks
5. ✅ Maintains Shopify webhook bypassing
6. ✅ Maintains OAuth route bypassing

================================================================================
FINAL DEPLOYMENT (Day 2)
================================================================================

DEPLOYMENT COMMAND:
```bash
git add .
git commit -m "fix: restore proper user experience while maintaining Shopify OAuth

ISSUE RESOLVED: White background with minimal text after bypassing maintenance

ROOT CAUSE:
- Simplified page.tsx only handled Shopify OAuth, breaking normal user flow
- Regular users (non-Shopify) were stuck on minimal page instead of proper routing
- Missing authentication-based redirects for dashboard/login flow

SOLUTION:
✅ Enhanced root page (/) with proper user routing
✅ Restored middleware authentication protection
✅ Maintains Shopify OAuth functionality
✅ All user types now have proper experience"

git push origin main
# ✅ SUCCESS: All functionality restored
```

================================================================================
IMPACT ANALYSIS: BEFORE VS AFTER
================================================================================

BEFORE FIX (Broken State):
| User Type              | Experience                                    |
|------------------------|-----------------------------------------------|
| Regular Users          | ❌ White background with minimal text        |
| Authenticated Users    | ❌ Stuck on minimal page, no dashboard       |
| Unauthenticated Users  | ❌ Stuck on minimal page, no login redirect  |
| Shopify OAuth Users    | ✅ Working correctly                          |
| Embedded App Users     | ✅ Working correctly                          |

AFTER FIX (Working State):
| User Type              | Experience                                    |
|------------------------|-----------------------------------------------|
| Regular Users          | ✅ Proper redirect to login page             |
| Authenticated Users    | ✅ Automatic redirect to dashboard           |
| Unauthenticated Users  | ✅ Proper redirect to login page             |
| Shopify OAuth Users    | ✅ Still working correctly                   |
| Embedded App Users     | ✅ Still working correctly                   |

================================================================================
TECHNICAL LESSONS LEARNED
================================================================================

1. ROUTE SIMPLIFICATION RISKS
   Issue: Over-simplifying routing logic broke normal user flows
   Lesson: Always maintain fallback logic for non-target users

2. MIDDLEWARE DEPENDENCIES
   Issue: Removing authentication middleware broke protected routes
   Lesson: OAuth integration should be additive, not replacement

3. IMPORT PATH CONSISTENCY
   Issue: Inconsistent import paths caused build failures
   Lesson: Verify all import paths match project structure

4. DYNAMIC ROUTE CONFLICTS
   Issue: Multiple dynamic routes in same directory caused conflicts
   Lesson: Use specific route names or different directory structures

5. COMPREHENSIVE TESTING
   Issue: Only tested target feature, missed impact on other users
   Lesson: Test all user flows when making routing changes

================================================================================
CURRENT WORKING STATE
================================================================================

✅ FUNCTIONAL COMPONENTS:
1. Shopify OAuth Flow - Simplified and working
2. User Authentication - Proper routing restored
3. Middleware Protection - Dashboard/admin routes protected
4. Webhook Security - HMAC validation implemented
5. Embedded App Support - Shopify admin integration working

🔗 LIVE ENDPOINTS:
- OAuth Init: https://crewflow.ai/api/auth/shopify?shop=store.myshopify.com
- OAuth Callback: https://crewflow.ai/api/auth/shopify/callback
- Embedded Landing: https://crewflow.ai/embedded
- Webhook Handler: https://crewflow.ai/api/webhooks/shopify/general

🎯 KEY TAKEAWAYS FOR FUTURE DEVELOPMENT:
1. Always test user flows comprehensively - Don't just test target feature
2. Maintain backward compatibility - New features shouldn't break existing flows
3. Use progressive enhancement - Add new functionality without removing existing logic
4. Verify all import paths - Especially when refactoring file structures
5. Test deployment pipeline - Catch build errors before they reach production

================================================================================
CONCLUSION
================================================================================

This development log demonstrates the importance of comprehensive testing and
maintaining backward compatibility when implementing new features. While the
Shopify OAuth integration was successfully simplified, the initial implementation
broke the normal user experience by oversimplifying critical routing logic.

The final solution successfully balances simplicity with functionality:
- Shopify OAuth integration works as intended
- Normal user flows are fully restored
- Code is cleaner and more maintainable
- All user types have proper experiences

STATUS: ✅ FULLY RESOLVED - All functionality working correctly
DEPLOYMENT: ✅ Live at crewflow.ai
READY FOR: Shopify dashboard testing and further development

================================================================================
END OF DEVELOPMENT LOG
================================================================================
